<?php
/**
 * @file
 *
 */

/**
 *
 * Load fedora_item.inc from the fedora_repository module in the api folder.
 * This is used to update, delete fedora objects
 *
 */
module_load_include('inc', 'fedora_repository', 'api/fedora_item');

/**
 * Implementation of hook_perm().
 */

function orphan_object_perm() {
  return array('administer Orphan Object Adminstration');
}

/**
 * Implementation of hook_menu().
 */
function orphan_object_menu() {
  $items = array();
  $items['admin/content/orphan-object'] = array(
    'title' => t('Orphan Object Administration'),
    'page callback' => 'orphan_object_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer Orphan Object Adminstration'),
    'description' => t('Administrative Interface for management of Orphaned Fedora Objects'),
  );
  return $items;
}

/**
 * Generates a page for the form.
 */
function orphan_object_form() {
  // Form builder call to build the form
  return drupal_get_form('orphan_object_formpage');
}

function orphan_object_getState($incpid) {
  $pid = $incpid;
  $urltest = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
  $urltest .= "/objects?terms=$pid&state=true&resultFormat=xml";
  $resultxml2 = do_curl($urltest);
  $resultelements2 = simplexml_load_string($resultxml2);
  if (!empty($resultelements2)) {
    $result2 = (string) $resultelements2->resultList->objectFields->state;
  }
  return $result2;
}

/**
 * Builds the orphan_object form.
 */
function orphan_object_formpage(&$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  if ($form_state['storage']['step'] == 1) {
    $resultsarray = orphan_object_getList();

    $oidcount = 1;
    $orphans = array();
    foreach ($resultsarray as $resultitem) {
      $fedora_item = new Fedora_Item($resultitem);
      //check to see if the fedora object exists, if exists 1 is returned.
      if ($fedora_item->exists()) {
        $xml = $fedora_item->export_as_foxml();
        preg_match('/<audit:justification>(.)*<\/audit:justification>\n<\/audit:record>\n<\/audit:auditTrail>/', $xml, $matches);
        $history = $matches[0];
        $history = str_replace(array('<audit:justification>', '</audit:justification>', '\n', '</audit:record>', '</audit:auditTrail>'), '', $history);
      }
      else {
        $history = '';
      }
    $orphans[$oidcount] = array('oid' => $oidcount, 'pid' => $resultitem, 'state' => orphan_object_getState($resultitem), 'logmessage' => $history);
    $oidcount++;
  }

    // Creates elements from the above values and sets up an array for the checkboxes
    foreach ($orphans as $orphan) {
      $manage[$orphan['oid']] = '';
      $form[$orphan['oid']]['pid'] = array
      (
        '#value' => $orphan['pid'],
      );
      $form[$orphan['oid']]['state'] = array
      (
        '#value' => $orphan['state'],
      );
      $form[$orphan['oid']]['logmessage'] = array
      (
        '#value' => $orphan['logmessage'],
      );
    }

    // Creates the checkboxes
    $form['manage'] = array(
      '#type' => 'checkboxes',
      '#options' => $manage,
    );

    // Creates the Save Configuration button
    $form['toManage'] = array(
      '#type' => 'submit',
      '#value' => 'Manage Selected Object(s)',
    );

    //Set form submit and theme
    $form['#submit'][] = 'orphan_object_formpage_submit';
    $form['#theme'] = 'orphan_object_theme';

    return $form;
  }
  elseif ($form_state['storage']['step'] == 2) {
    $passedarray = array();
    $sendresults = orphan_object_getList();
    $passedcount = 0;
    foreach ($form_state['storage']['values']['1']['manage'] as $key => $element) {
      $passedarray[$passedcount] = $sendresults[($element-1)];
      $passedcount++;
    }

    $sentoidcount = 1;
    $sentorphans = array();
    foreach ($passedarray as $passeditem) {
      if (isset($passeditem)) {
        $sentorphans[$sentoidcount] = array('oid' => $sentoidcount, 'pid' => $passeditem, 'status' => orphan_object_getState($passeditem), 'log' => '');
        $sentoidcount++;
      }
    }
    $radioOptions = array(
      '#type' => 'radios',
      '#options' => array('A' => 'Activate', 'I' => 'Inactivate', 'D' => 'Delete', 'P' => 'Purge', ),
      '#prefix' => '<div  class="container-inline">',
      '#sufix' => '</div>'
    );

    // Creates elements from the above values and sets up an array for the checkboxes
    foreach ($sentorphans as $orphan) {
      // Object Cell
      $form['orphans'][$orphan['oid']]['pid'] = array( '#value' => $orphan['pid']);
      $form['orphans'][$orphan['oid']]['identifier'] = array('#type' => 'hidden', '#value' => $orphan['pid']);
      // Radios Cell
      $form['orphans'][$orphan['oid']]['#tree'] = TRUE;
      $form['orphans'][$orphan['oid']]['status'] = $radioOptions;
      $form['orphans'][$orphan['oid']]['status']['#default_value'] = $orphan['status'];
      $form['orphans'][$orphan['oid']]['orgStatus'] = array('#type' => 'hidden', '#value' => $orphan['status']);
      // Log Message
      $form['orphans'][$orphan['oid']]['log'] = array('#type' => 'textfield', '#default_value' => $orphan['log']);
    }

    // Creates the Save Configuration button
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save Configuration',
    );

    //Set form submit and theme
    $form['#submit'][] = 'orphan_object_formpage_submit';
    $form['#theme'] = 'orphan_object_form_update';

    return $form;
  } //end else if
}

/**
 * Sets what occurs when the Save Configuration is clicked.
 */
function orphan_object_formpage_submit($form, &$form_state) {

  global $user;
  $form_state['storage']['values'][$form_state['storage']['step']]  = $form_state['values'];

  if ($form_state['clicked_button']['#id'] == 'edit-toManage') {
    $form_state['storage']['step']++;
  }
  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    $form_state['storage']['step']--;
    // Load fedora_item.inc from the fedora_repository module in the api folder.
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');

    foreach ($_POST as $key) {
      //exit the foreach once all the files have been processed.
      // [op] = "Save Configuration" is the first element after all the objects
      if ($key == "Save Configuration") {
        break;
      }
      $logmsg = $key['log'];
      if ($key['status'] != $key['orgStatus']) {
        $switch = $key['status'];
      }
      else {
        $switch = "";
      }

      switch ($switch) {
        case 'A':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_activate_fedora_objects($key['identifier'], $user, $logmsg );
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully activated.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' is a nonexistent PID.');
          }
          break;
        case 'I':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_inactivate_fedora_objects($key['identifier'], $user, $logmsg);
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully inactivated.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' is a nonexistent PID.');
          }
          break;
        case 'P':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_purge_fedora_objects($key['identifier'], $user, $logmsg);
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully purged.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' is a nonexistent PID.');
          }
        break;
        case 'D':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_delete_fedora_objects($key['identifier'], $user, $logmsg);
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully deleted.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' is a nonexistent PID.');
          }
          break;
        default:
          drupal_set_message(check_plain($key['identifier']) . ' has not been issued a new state.');
        break;
      }
    }
    unset($form_state['storage']);
  }
}

/**
 * Sets up for the theme.
 */

function orphan_object_theme() {
  return array
  (
    'orphan_object_theme' => array
    (
      'arguments' => array('form' => NULL)
    ),
    'orphan_object_form_update' => array
    (
      'arguments' => array('form' => NULL)
    ),
  );
}

/**
 * Sets the theme.
 */
function theme_orphan_object_theme($form) {
  $rows = array();
  //Creates the table rows
  foreach (element_children($form['manage']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['manage'][$oid]);
    $row[] = drupal_render($form[$oid]['pid']);
    $row[] = drupal_render($form[$oid]['state']);
    $row[] = drupal_render($form[$oid]['logmessage']);
    $rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Manage Object'), t('Object PID'), t('Object State'), t('Last Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Manage Object'), t('Object PID'), t('Object State'), t('Last Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were found'),
      'colspan' => 2,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $content = theme('table', $header, $rows);
  $output = $content;
  $output .= drupal_render($form);
  return $output;

  }

/**
 * Sets the theme.
 */
function theme_orphan_object_form_update($form) {
  $rows = array();

  //Creates the table rows
  foreach (element_children($form['orphans']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['orphans'][$oid]['pid']);
    $row[] = drupal_render($form['orphans'][$oid]['status']);
    $row[] = drupal_render($form['orphans'][$oid]['log']);
    $rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Identifiers'), t('Status'), t('Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Identifiers'), t('Status'), t('Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were selected'),
      'colspan' => 2,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
 * Method used to delete orphan fedora objects
 *
 * @param $objects
 * An array of object PIDs selected by the user to be deleted.
 * @param $user
 * The current User. (This is the user deleting the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_delete_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'D'; //Set the object to deleted
        $label = $fedora_item->objectProfile->objLabel; // Object Label
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        }
        else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " has been deleted by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId, $log_message, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
 * Method used to purge orphan fedora objects
 *
 * @param $objects
 * An array of object PIDs selected by the user to be purged.
 * @param $user
 * The current User. (This is the user pruging the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_purge_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }
  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $log_message = "PID " . $value . " is being set to purged by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }
  return $results;
}

/**
 * Method used to set objects' state to inactive.
 *
 * @param $objects
 * An array of object PIDs selected by the user to be purged.
 * Array Format $object[label] = PID, example $object["Test"] = islandora:13424.
 * @param $user
 * The current User. (This is the user activate the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_inactivate_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }
  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'I'; //Set the object to inactivated
        $label = $fedora_item->objectProfile->objLabel; // Object Label
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        }
        else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " has been set to inactive by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId , $log_message, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }
  return $results;
}

/**
 * Method used to activate orphan fedora objects
 *
 * @param $objects
 * An array of object PIDs selected by the user to be purged.
 * @param $user
 * The current User. (This is the user activate the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_activate_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'A'; //Set the object to active
        $label = $fedora_item->objectProfile->objLabel; // needs to be filled in with objects label.
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        }
        else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " is being set to active by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId, $log_message, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
 * Function: orphan_objects_getList
 *
 * Description: Returns an array containing all the orphan objects in the fedora repository
 *
 * @return array
 */

function orphan_object_getList() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  $collectionarray = array();

  $collectionquery = 'select $object $title from <#ri>
                            where ($object <dc:title> $title
                              and $object <fedora-rels-ext:isMemberOfCollection><info:fedora/islandora:Generic_Collection>)';
  $collectionurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $collectionurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $collectioncontent = do_curl($collectionurl . htmlentities(urlencode($collectionquery)));
  $collectionlist = explode("\n", $collectioncontent);


  array_shift($collectionlist);

  $collectionlist = preg_replace('/info:fedora\//', '', $collectionlist);
  $collectionarray = array();
  foreach ($collectionlist as $collectionitem) {   //removes  blanks
    if ($collectionitem) {
      $collectionparts = explode(',', $collectionitem);
      array_push($collectionarray, $collectionparts[0]);
    }
  }

  $nidarray = array();
  $pidarray = array();
  $existingnodes = array();
  $nonexistingnodes = array();
  $npidarray = array();

  $results = db_query("SELECT nid FROM {node_fedora_objects}");

  while ($row = db_fetch_object($results)) {
    $nidarray[] = $row->nid;

  }
  foreach ($nidarray as $checknid) {
    $test_node = node_load($checknid);
    if ($test_node != FALSE) {
      $existingnodes[] = $checknid;
    }
    else {
      $nonexistingnodes[] = $checknid;
    }
  }

  if (!empty($existingnodes)) {
    $placeholders = db_placeholders($existingnodes);
    $pidresults = db_query("SELECT f.pid FROM {node_fedora_objects} f WHERE f.nid IN ($placeholders)", $existingnodes);

    while ($row = db_fetch_object($pidresults)) {
      $pidarray[] = $row->pid;
    }
  }

  if (!empty($nonexistingnodes)) {
    $placeholders = db_placeholders($nonexistingnodes);
    $pidresults = db_query("SELECT f.pid FROM {node_fedora_objects} f WHERE f.nid IN ($placeholders)", $existingnodes);

    while ($row = db_fetch_object($npidresults)) {
      $npidarray[] = $row->pid;
    }
  }

  $returnlist = array_diff($collectionarray, $pidarray);
  $reversereturnlist = array_intersect($pidarray, $collectionarray);
  $nonexistlist = array_intersect($reversereturnlist, $npidarray);
  $returnlist = array_merge($returnlist, $nonexistlist);

  return $returnlist;
}