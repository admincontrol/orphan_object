<?php
/**
* @file
*
*
*
*
*/

/**
*
* Load fedora_item.inc from the fedora_repository module in the api folder.
* This is used to update, delete fedora objects
*
*/
module_load_include('inc', 'fedora_repository', 'api/fedora_item');

/**
* Implementation of hook_perm().
*/

function orphan_object_perm() {
  return array('administer Orphan Object Adminstration');
}

/**
* Implementation of hook_menu().
*/
function orphan_object_menu() {
  $items = array();
  $items['admin/content/orphan-object'] = array(
    'title' => t('Orphan Object Administration'),
    'page callback' => 'orphan_object_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer Orphan Object Adminstration'),
    'description' => t('Administrative Interface for management of Orphaned Fedora Objects'),
  );


	$items ['admin/content/orphan-object/Update'] = array(
		'title' => t('Update Orphan Objects'),
		'page callback' => 'orphan_object_form_update',
		'access callback' => 'user_access',
		'access arguments' => array('administer Orphan Object Administration'),
		'description' => t('Change orphan status')
);

  return $items;
}

/**
* Generates a page for the form.
*/
function orphan_object_form() {
  // Form builder call to build the form
  return drupal_get_form('orphan_object_formpage');

}

/**
* Generates a page for the form for update page.
*/
function orphan_object_form_update() {
  // Form builder call to build the form
  return drupal_get_form('orphan_object_formpage_update');

}
/**
* Builds the update orphan object form page
*/
function orphan_object_formpage_update($form_state) {

	global $orphans;

	// Creates an array to hold the values to be used to create the form elements
	$orphans = array
	(
		array(
			'oid' => 0,
			'title' => '<a href = "http://192.168.56.195/fedora/repository/islandora:2216/-/Heart%20Beat">Heart Beat</a>',
			'identifier' => 'islandora:2216',
			'status' => 'A',
		),
		array(
			'oid' => 1,
			'title' => '<a href = "http://192.168.56.195/fedora/repository/islandora:2221/-/Elmsdale">Elmsdale</a>',
			'identifier' => 'islandora:2221',
			'status' => 'I',
		)
	);

  module_load_include('inc', 'fedora_repository', 'api/fedora_collection');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');

	$radioOptions = array(
		'#type' => 'radios',
		'#options' => array('A' => 'Activate', 'I' => 'Inactivate', 'D' => 'Delete', 'P' => 'Purge',),
		'#prefix' => '<div  class="container-inline">',
		'#sufix' => '</div>'
	);



  // Creates elements from the above values and sets up an array for the checkboxes
  foreach ($orphans as $orphan) {
		// Object Cell
		$form['orphans'][$orphan['oid']]['identifier'] = array( '#value' => $orphan['identifier']);
    $form['orphans'][$orphan['oid']]['pid'] = array('#type' => 'hidden', '#value' => $orphan['identifier']);
    $form['orphans'][$orphan['oid']]['orgStatus'] = array('#type' => 'hidden', '#value' => $orphan['status']);
		// Radios Cell
		$form['orphans'][$orphan['oid']]['#tree'] = TRUE;
		$form['orphans'][$orphan['oid']]['status'] = $radioOptions;
		$form['orphans'][$orphan['oid']]['status']['#default_value'] = $orphan['status'];

		// Log Message
		$form['orphans'][$orphan['oid']]['log'] = array('#type' => 'textfield');
  }

  // Creates the Save Configuration button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save Configuration',
  );

  //Set form submit and theme
  $form['#submit'][] = 'orphan_object_formpage_update_submit';
  $form['#theme'] = 'orphan_object_form_update';

  return $form;
}
/**
* Sets what occurs when the Save Configuration is clicked for the update form
*/
function orphan_object_formpage_update_submit($form, &$form_state) {
  // Load fedora_item.inc from the fedora_repository module in the api folder.
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
	global $user;
  foreach($_POST as $key) {
    //exit the foreach once all the files have been processed.
    // [op] = "Save Configuration" is the first element after all the objects
    if ($key == "Save Configuration") {
      break;
    }
		$logmsg = $key['log'];
    if ($key['status'] != $key['orgStatus']) {
      $switch = $key['status'];
    }
    else {
      $switch = "";
    }

		switch($switch) {
			case 'A':
        $fedora_item = new Fedora_Item($key['pid']);
        if ($fedora_item->exists()) {
				  orphan_object_activate_fedora_objects($key['pid'], $user->uid, $logmsg );
  	      drupal_set_message(t(check_plain($key['pid']).' has been success activated.'));
        }
        else {
          drupal_set_message(t(check_plain($key['pid']).' is a nonexistent PID.'));
        }
				break;
			case 'I':
        $fedora_item = new Fedora_Item($key['pid']);
        if ($fedora_item->exists()) {
				  orphan_object_inactivate_fedora_objects($key['pid'], $user->uid, $logmsg);
  	      drupal_set_message(t(check_plain($key['pid']).' has been success inactivated.'));
        }
        else {
          drupal_set_message(t(check_plain($key['pid']).' is a nonexistent PID.'));
        }
				break;
			case 'P':
        $fedora_item = new Fedora_Item($key['pid']);
        if ($fedora_item->exists()) {
				  orphan_object_purge_fedora_objects($key['pid'], $user->uid, $logmsg);
  	      drupal_set_message(t(check_plain($key['pid']).' has been success deleted.'));
        }
        else {
          drupal_set_message(t(check_plain($key['pid']).' is a nonexistent PID.'));
        }
				break;
			case 'D':
        $fedora_item = new Fedora_Item($key['pid']);
        if ($fedora_item->exists()) {
				  orphan_object_delete_fedora_objects($key['pid'], $user->uid, $logmsg);
  	      drupal_set_message(t(check_plain($key['pid']).' has been success purged.'));
        }
        else {
          drupal_set_message(t(check_plain($key['pid']).' is a nonexistent PID.'));
        }
				break;
      default:
        drupal_set_message(t(check_plain($key['pid']).' has not been issued a new state.'));
				break;
		}
	}
  //replace with drupal_go_to
}
//***********************************************************

/**
* Builds the orphan_object form.
*/
function orphan_object_formpage($form_state) {

}

/**
* Sets what occurs when the Save Configuration is clicked.
*/
function orphan_object_formpage_submit($form, &$form_state) {
  // Load fedora_item.inc from the fedora_repository module in the api folder.
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
}


/**
* Sets up for the theme.
*/

function orphan_object_theme() {
  return array(
    'orphan_object_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'orphan_object_form_update' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
* Sets the theme.
*/

function theme_orphan_object_form_update($form) {
  $rows = array();

  //Creates the table rows
  foreach (element_children($form['orphans']) as $oid) {
    $row = array();
    //$row[] = drupal_render($form['active'][$oid]);
    //$row[] = drupal_render($form[$oid]['title']);
    $row[] = drupal_render($form['orphans'][$oid]['identifier']);
		$row[] = drupal_render($form['orphans'][$oid]['status']);
		$row[] = drupal_render($form['orphans'][$oid]['log']);
		$rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(/*t('Active'), t('Object Title'),*/ t('Identifiers'), t('Status'), t('Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(/*t('Active'), t('Object Title'),*/ t('Identifier'), t('Status'), t('Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were found'),
      'colspan' => 2,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
* Method used to delete orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be deleted.
* @param $uid
* The current User ID. (This is the user deleting the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_delete_fedora_objects($objects, $uid, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'D'; //Set the object to deleted
        $label = $fedora_item->objectProfile->objLabel; // Object Label
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        } else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " is being set to active by user: {" . $uid . "}. " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId, $logMessage, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to purge orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user pruging the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_purge_fedora_objects($objects, $uid, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $log_message = "PID " . $value . " is being set to purged by user: {" . $uid . "}. " . $user_set_log;
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to set objects' state to inactive.
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* Array Format $object[label] = PID, example $object["Test"] = islandora:13424.
* @param $uid
* The current User ID. (This is the user activate the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_inactivate_fedora_objects($objects, $uid, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'I'; //Set the object to inactivated
        $label = $fedora_item->objectProfile->objLabel; // Object Label
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        } else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " is being set to active by user: {" . $uid . "}. " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId , $logMessage, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to activate orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user activate the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/
function orphan_object_activate_fedora_objects($objects, $uid, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'A'; //Set the object to active
        $label = $fedora_item->objectProfile->objLabel; // needs to be filled in with objects label.
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        } else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " is being set to active by user: {" . $uid . "}. " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId, $logMessage, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
 * Function: orphan_objects_getlist
 *
 * Description: Returns an array containing all the orphan objects in the fedora repository
 *
 * @return array
 */

function orphan_object_getlist() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  $restricted = variable_get('fedora_namespace_restriction_enforced', TRUE);

  //query grabs everything in the repository
  $everythingquery = 'select $object $title from <#ri>
                                   where ($object <dc:title> $title)';

  //convert the query into an array, method based off get_collections_as_option_array() from api/fedora_utils.inc
  //all other queries use this same method but with different variable names
  $everythingurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $everythingurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $everythingcontent = do_curl($everythingurl . htmlentities(urlencode($everythingquery)));
  $everythinglist = explode("\n", $everythingcontent);
  array_shift($everythinglist);
  $everythinglist = preg_replace('/info:fedora\//', '', $everythinglist);
  $everything = array();
  foreach ($everythinglist as $everythingitem) {   //removes  blanks
    if ($everythingitem) {
      $everythingparts = explode(',', $everythingitem);
	  array_push($everything, $everythingparts[0]);  //place only the pid in the array
    }
  }

  //grabs all the collection pids
  $collectionsquery = 'select $object $title from <#ri>
                            where ($object <dc:title> $title
                              and $object <info:fedora/fedora-system:def/model#hasModel> <info:fedora/islandora:collectionCModel>)
                            order by $title';
  $collectionsurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $collectionsurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $collectionscontent = do_curl($collectionsurl . htmlentities(urlencode($collectionsquery)));
  $collectionslist = explode("\n", $collectionscontent);
  array_shift($collectionslist);
  $collectionslist = preg_replace('/info:fedora\//', '', $collectionslist);
  $collections = array();
  foreach ($collectionslist as $collectionsitem) {   //removes  blanks
    if ($collectionsitem) {
      $collectionsparts = explode(',', $collectionsitem);
      array_push($collections, $collectionsparts[0]);
    }
  }

  //an array to hold all the results of the upcoming foreach
  $collectionsarray = array();

  //used to grab all the objects that are members of the collections from the previous query
  foreach ($collections as $cpid) {

    $cpidquery = 'select $object $title from <#ri>
                              where ($object <dc:title> $title
                                and $object <fedora-rels-ext:isMemberOfCollection><info:fedora/' . $cpid . '>)';
    $cpidurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
    $cpidurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
    $cpidcontent = do_curl($cpidurl . htmlentities(urlencode($cpidquery)));
    $cpidlist = explode("\n", $cpidcontent);
    array_shift($cpidlist);
    $cpidlist = preg_replace('/info:fedora\//', '', $cpidlist);
    $cpidarray = array();
    foreach ($cpidlist as $cpiditem) {   //removes  blanks
      if ($cpiditem) {
        $cpidparts = explode(',', $cpiditem);
        array_push($cpidarray, $cpidparts[0]);
      }
    }

  //merge all the results into one array
  $collectionsarray = array_merge ($collectionsarray, $cpidarray);

  }

  //set up variables to be used in upcoming while
  $objectsarray = array();
  $nextarray = array();
  $queryarray = $collectionsarray;
  $done = 1;

  //used to grab all the objects that are members of the objects held within $queryarray and any
  //objects that members of those objects, and so on
  while ($done > 0)
  {
    //set $done to 0 so that if nothing is done the loop ends
    $done = 0;
    foreach ($queryarray as $opid) {

      $opidquery = 'select $object $title from <#ri>
                                where ($object <dc:title> $title
                                  and $object <fedora-rels-ext:isMemberOf><info:fedora/' . $opid . '>)';
      $opidurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
      $opidurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
      $opidcontent = do_curl($opidurl . htmlentities(urlencode($opidquery)));
      $opidlist = explode("\n", $opidcontent);
      array_shift($opidlist);
      $opidlist = preg_replace('/info:fedora\//', '', $opidlist);
      $opidarray = array();
      foreach ($opidlist as $opiditem) {   //removes  blanks
        if ($opiditem) {
          $opidparts = explode(',', $opiditem);
          array_push($opidarray, $opidparts[0]);
        }
      }

      //if the $opidarray is not empty merge the results into $objectsarray and $nextarray, and increase done
	  if (!empty($opidarray)){
        $objectsarray = array_merge ($objectsarray, $opidarray);
	    $nextarray = array_merge ($nextarray, $opidarray);
		$done++;
	  }
    }
    //make $queryarray equal to $nextarray
	$queryarray = $nextarray;
  }

  //query to grab all the content models
  $cmodelsquery = 'select $object $title from <#ri>
						            where ($object <dc:title> $title
                                      and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ContentModel-3.0>
                                      or $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:ContentModelsCollection>))
                                    order by $title';
  $cmodelsurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $cmodelsurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $cmodelscontent = do_curl($cmodelsurl . htmlentities(urlencode($cmodelsquery)));
  $cmodelslist = explode("\n", $cmodelscontent);
  array_shift($cmodelslist);
  $cmodelslist = preg_replace('/info:fedora\//', '', $cmodelslist);
  $cmodels = array();
  foreach ($cmodelslist as $cmodelsitem) {   //removes  blanks
    if ($cmodelsitem) {
      $cmodelsparts = explode(',', $cmodelsitem);
      array_push($cmodels, $cmodelsparts[0]);
    }
  }

  //query to grab all the service models
  $smodelsquery = 'select $object $title from <#ri>
                                where ($object <dc:title> $title
                                  and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ServiceDefinition-3.0>))
                                order by $title';
  $smodelsurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $smodelsurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $smodelscontent = do_curl($smodelsurl . htmlentities(urlencode($smodelsquery)));
  $smodelslist = explode("\n", $smodelscontent);
  array_shift($smodelslist);
  $smodelslist = preg_replace('/info:fedora\//', '', $smodelslist);
  $smodels = array();
  foreach ($smodelslist as $smodelsitem) {   //removes  blanks
    if ($smodelsitem) {
      $smodelsparts = explode(',', $smodelsitem);
      array_push($smodels, $smodelsparts[0]);
    }
  }

  //query to grab all the service deployment
  $sdeploymentquery = 'select $object $title from <#ri>
                                where ($object <dc:title> $title
                                  and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ServiceDeployment-3.0>))
                                order by $title';
  $sdeploymenturl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $sdeploymenturl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $sdeploymentcontent = do_curl($sdeploymenturl . htmlentities(urlencode($sdeploymentquery)));
  $sdeploymentlist = explode("\n", $sdeploymentcontent);
  array_shift($sdeploymentlist);
  $sdeploymentlist = preg_replace('/info:fedora\//', '', $sdeploymentlist);
  $sdeployment = array();
  foreach ($sdeploymentlist as $sdeploymentitem) {   //removes  blanks
    if ($sdeploymentitem) {
      $sdeploymentparts = explode(',', $sdeploymentitem);
      array_push($sdeployment, $sdeploymentparts[0]);
    }
  }

  //Whole bunch of array_diffs using the arrays created from all the previous operations
  //removes everything that isn't an orphan and returns only the orphans
  $returnlist = array_diff($everything, $collectionsarray);
  $returnlist = array_diff($returnlist, $objectsarray);
  $returnlist = array_diff($returnlist, $cmodels);
  $returnlist = array_diff($returnlist, $smodels);
  $returnlist = array_diff($returnlist, $sdeployment);
  $returnlist = array_diff($returnlist, $collections);

  return $returnlist;
}

