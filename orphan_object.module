<?php
/**
 * @file
 *
 */

/**
 * Implementation of hook_help().
 */
function orphan_object_help($path, $arg) {
  switch ($path) {
    case 'admin/help#orphan_object':
      $output = '<p>'. t('Orphan Object Module') .'</p>';
      $output .= '<p>'. t('This module allows for administrators to manage orphan fedora objects.  Orphan fedora objects by default are classified as any object linked to the Islandora GENERIC Collection (islandora:sp_generic_collection) which does not have a node association.  This means the object was either inserted via the digital repository, that the node it was associated with was deleted, or the islandora_upload module was uninstalled and the relationship table was cleared.  From this screen objects may be selected to be managed which is when a user can change the state or purge the object.  The other option is to select associate objects which lets a user choose to link objects to nodes which will form the node relationship, activate the object, generate public XACML and set the object view to be public.  Once this link has been completed the node will no longer and will no longer show up in the Orphan Object Administration screen.  An admin user may also throught the configuration page change the defaulted collection to define orphan objects, this could be used to associate other uploaded collections directly to node pages.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */

function orphan_object_perm() {
  return array('administer Orphan Object Adminstration');
}

/**
 * Implementation of hook_menu().
 */
function orphan_object_menu() {
  $items = array();
  $items['admin/settings/orphan-object'] = array(
    'title' => t('Orphan Object Settings'),
    'description' => 'Control which collection is searched.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('orphan_object_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'orphan_object.admin.inc',
  );
  $items['admin/content/orphan-object'] = array(
    'title' => t('Orphan Object Administration'),
    'page callback' => 'orphan_object_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer Orphan Object Adminstration'),
    'description' => t('Administrative Interface for management of Orphaned Fedora Objects'),
  );
  return $items;
}

/**
 * Generates a page for the form.
 */
function orphan_object_form() {
  // Form builder call to build the form
  return drupal_get_form('orphan_object_formpage');
}

function orphan_object_getState($incpid) {
  $pid = $incpid;
  $urltest = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
  $urltest .= "/objects?terms=$pid&state=true&resultFormat=xml";
  $resultxml2 = do_curl($urltest);
  $resultelements2 = simplexml_load_string($resultxml2);
  if (!empty($resultelements2)) {
    $result2 = (string) $resultelements2->resultList->objectFields->state;
  }
  return $result2;
}

/**
 * Builds the orphan_object form.
 */
function orphan_object_formpage(&$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  global $base_url;

  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  if ($form_state['storage']['step'] == 1) {
    $resultsarray = orphan_object_getList();
    $oidcount = 1;
    $orphans = array();
    foreach ($resultsarray as $resultitem) {
      $title = "";
      $fedora_item = new Fedora_Item($resultitem);
      //check to see if the fedora object exists, if exists 1 is returned.
      if ($fedora_item->exists()) {
        $xml = $fedora_item->export_as_foxml();
        preg_match('/<audit:justification>(.)*<\/audit:justification>\n<\/audit:record>\n<\/audit:auditTrail>/', $xml, $matches);
        $history = $matches[0];
        $history = str_replace(array('<audit:justification>', '</audit:justification>', '\n', '</audit:record>', '</audit:auditTrail>'), '', $history);
        $title = $fedora_item->objectProfile->objLabel;
      }
      else {
        $history = '';
      }
      if ($title == ""  || empty($title)) {
        $title = $resultitem;
      }
      $url = $base_url . "/fedora/repository/$resultitem";
      $url_to_curl = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
      $url_to_curl .= "/objects?terms=$resultitem&ownerId=true&resultFormat=xml";
      $resultxml = do_curl($url_to_curl);
      $resultelements = simplexml_load_string($resultxml);
      if (!empty($resultelements)) {
        $owner = (string) $resultelements->resultList->objectFields->ownerId;
      }
      else {
        $owner = "";
      }
      $orphans[$oidcount] = array('oid' => $oidcount, 'pid' => $resultitem, 'title' => '<a href = "' . $url . '" target="_blank">' . $title . '</a>', 'owner' => $owner, 'state' => orphan_object_getState($resultitem), 'logmessage' => $history);
      $oidcount++;
    }
    $form_state['storage']['orphans'] = $orphans;

  // Creates elements from the above values and sets up an array for the checkboxes
  foreach ($orphans as $orphan) {
    $manage[$orphan['oid']] = '';
    $form[$orphan['oid']]['pid'] = array
      (
        '#value' => $orphan['title'],
      );
    $form[$orphan['oid']]['owner'] = array
      (
        '#value' => $orphan['owner'],
      );
    $form[$orphan['oid']]['state'] = array
      (
        '#value' => $orphan['state'],
      );
    $form[$orphan['oid']]['logmessage'] = array
      (
        '#value' => $orphan['logmessage'],
      );
  }

    // Creates the checkboxes
    $form['manage'] = array(
      '#type' => 'checkboxes',
      '#options' => $manage,
    );

    // Creates the Save Configuration button
    $form['toManage'] = array(
      '#type' => 'submit',
      '#value' => 'Manage Selected Object(s)',
    );

    $form['toNodeAssociation'] = array(
      '#type' => 'submit',
      '#value' => 'Associate Object(s) to Node(s)',
    );

    //Set form submit and theme
    $form['#submit'][] = 'orphan_object_formpage_submit';
    $form['#theme'] = 'orphan_object_theme';

    return $form;
  }
  elseif ($form_state['storage']['step'] == 2) {
    drupal_set_message(t("Warning: Any items purged from this page will be permanently removed."), "error");
    $sentorphans = array();
    foreach ($form_state['storage']['passed'] as $passeditem) {
      if (isset($passeditem)) {
        $sentorphans[] = $passeditem;
      }
    }
    $radioOptions = array(
      '#type' => 'radios',
      '#options' => array('A' => 'Activate', 'I' => 'Inactivate', 'D' => 'Delete', 'P' => 'Purge', ),
      '#prefix' => '<div  class="container-inline">',
      '#sufix' => '</div>'
    );

    // Creates elements from the above values and sets up an array for the checkboxes
    foreach ($sentorphans as $orphan) {
      // Object Cell
      $form['orphans'][$orphan['oid']]['title'] = array( '#value' => $orphan['title']);
      $form['orphans'][$orphan['oid']]['identifier'] = array('#type' => 'hidden', '#value' => $orphan['pid']);
      // Radios Cell
      $form['orphans'][$orphan['oid']]['#tree'] = TRUE;
      $form['orphans'][$orphan['oid']]['status'] = $radioOptions;
      $form['orphans'][$orphan['oid']]['status']['#default_value'] = $orphan['state'];
      $form['orphans'][$orphan['oid']]['orgStatus'] = array('#type' => 'hidden', '#value' => $orphan['state']);
      // Log Message
      $form['orphans'][$orphan['oid']]['log'] = array('#type' => 'textfield');
    }

    // Creates the Save Configuration button
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save Configuration',
    );

    //Set form submit and theme
    $form['#submit'][] = 'orphan_object_formpage_submit';
    $form['#theme'] = 'orphan_object_form_update';

    return $form;
  } //end else if step 2
  elseif ($form_state['storage']['step'] == 3) {
    $sentorphans = array();
    foreach ($form_state['storage']['passed'] as $passeditem) {
      if (isset($passeditem)) {
        $sentorphans[] = $passeditem;
      }
    }

    $selectOptions = array("" => "- Select Node To Link Object To - ");
    $query =  db_query(db_rewrite_sql("SELECT * FROM {node} n"));
    while ($row_nodes = db_fetch_object($query)) {
      $selectOptions[$row_nodes->nid] = $row_nodes->nid . " : " . $row_nodes->title;

    }

    // Creates elements from the above values and sets up an array for the checkboxes
    foreach ($sentorphans as $orphan) {
      // Object Cell
      $form['orphans'][$orphan['oid']]['title'] = array( '#value' => $orphan['title']);
      $form['orphans'][$orphan['oid']]['identifier'] = array('#type' => 'hidden', '#value' => $orphan['pid']);
      // Select Cell
      $form['orphans'][$orphan['oid']]['#tree'] = TRUE;
      $form['orphans'][$orphan['oid']]['nid'] = array(
       '#type' => 'select',
       '#options' => $selectOptions,
      );
      // Log Message
      $form['orphans'][$orphan['oid']]['log'] = array('#type' => 'textfield', '#size' => 45);
    }

    // Creates the Save Configuration button
    $form['associate'] = array(
      '#type' => 'submit',
      '#value' => 'Save Node Associations',
    );

    //Set form submit and theme
    $form['#submit'][] = 'orphan_object_formpage_submit';
    $form['#theme'] = 'orphan_object_form_associate';

    return $form;
  } //end else if
}

/**
 * Sets what occurs when the Save Configuration is clicked.
 */
function orphan_object_formpage_submit($form, &$form_state) {

  global $user;

  if ($form_state['clicked_button']['#id'] == 'edit-toManage') {
    $form_state['storage']['step']++;
    $passedarray = array();
    foreach ($form_state['values']['manage'] as $key => $element) {
      if (isset($element)) {
        $passedarray[] = $form_state['storage']['orphans'][$element];
      }
    }
    $form_state['storage']['passed'] = $passedarray;
  }
  if ($form_state['clicked_button']['#id'] == 'edit-toNodeAssociation') {
    $form_state['storage']['step'] = 3; //increment to the 3rd step
    $passedarray = array();
    foreach ($form_state['values']['manage'] as $key => $element) {
      if (isset($element)) {
        $passedarray[] = $form_state['storage']['orphans'][$element];
      }
    }
    $form_state['storage']['passed'] = $passedarray;
  }
  if ($form_state['clicked_button']['#id'] == 'edit-associate') {
    $form_state['storage']['step'] = 1; //reset to step one
    // Load fedora_item.inc from the fedora_repository module in the api folder.
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');

    foreach ($_POST as $key) {
      //exit the foreach once all the files have been processed.
      // [op] = "Save Node Associations" is the first element after all the objects
      if ($key == "Save Node Associations") {
        break;
      }
      $node = node_load($key['nid']);
      //only create a relationship if the node is existing at the time of processing
      if ($key['nid'] != "" &&  $node != FALSE) {
        $fedora_item = new Fedora_Item($key['identifier']);
        if ($fedora_item->exists()) {
          //activate object
          orphan_object_activate_fedora_objects($key['identifier'], $user, $key['log'] );
          //delete any existing relationships
          db_query("DELETE FROM {node_fedora_objects} WHERE pid = '%s'", $file->pid);
          //delete permissions
          $result = db_query("SELECT iapid FROM {islandora_attachment_permissions} WHERE pid = '%s'", $key['identifier']);
          $iapid = db_result($result);
          db_query("DELETE FROM {islandora_attachment_permissions} WHERE pid = '%s'", $key['identifier']);
          db_query("DELETE FROM {islandora_attachment_permission_users} WHERE ubid = %d", $iapid );
          db_query("DELETE FROM {islandora_attachment_permission_roles} WHERE rbid = %d", $iapid );
          //Insert new relation and create a public permission record
          db_query("INSERT INTO {node_fedora_objects} (nid, pid, ownerid) VALUES (%d, '%s', %d)", $key['nid'], $key['identifier'], $user->uid);
          db_query("INSERT INTO {islandora_attachment_permissions} (public_permission, private_permission, pid) VALUES (1, 0, '%s')", $key['identifier']);
          //attach new public XACML
          orphan_object_create_xacml_policy_public($key['identifier'], $user-uid, $node->uid);
          //Set Success Message
          drupal_set_message(check_plain($key['identifier']) . ' has been successfully activated and is now linked with node ID ' . $key['nid'] . '.');
        }
        else {
          drupal_set_message(check_plain($key['identifier']) . ' orphan was purged by another user or the PID is nonexistent.');
        }
      }
      else {
        drupal_set_message(check_plain($key['identifier']) . ' has not been link to Node ID ' . $key['nid'] . ' because the node no longer exists or the there was no node selected.');
      }
    }

  }

  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    $form_state['storage']['step']--;
    // Load fedora_item.inc from the fedora_repository module in the api folder.
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');

    foreach ($_POST as $key) {
      //exit the foreach once all the files have been processed.
      // [op] = "Save Configuration" is the first element after all the objects
      if ($key == "Save Configuration") {
        break;
      }
      $logmsg = $key['log'];
      if ($key['status'] != $key['orgStatus']) {
        $switch = $key['status'];
      }
      else {
        $switch = "";
      }

      switch ($switch) {
        case 'A':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_activate_fedora_objects($key['identifier'], $user, $logmsg );
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully activated.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' orphan was purged by another user or the PID is nonexistent.');
          }
          break;
        case 'I':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_inactivate_fedora_objects($key['identifier'], $user, $logmsg);
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully inactivated.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' orphan was purged by another user or the PID is nonexistent.');
          }
          break;
        case 'P':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_purge_fedora_objects($key['identifier'], $user, $logmsg);
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully purged.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' orphan was purged by another user or the PID is nonexistent.');
          }
        break;
        case 'D':
          $fedora_item = new Fedora_Item($key['identifier']);
          if ($fedora_item->exists()) {
            orphan_object_delete_fedora_objects($key['identifier'], $user, $logmsg);
            drupal_set_message(check_plain($key['identifier']) . ' has been successfully deleted.');
          }
          else {
            drupal_set_message(check_plain($key['identifier']) . ' orphan was purged by another user or the PID is nonexistent.');
          }
          break;
        default:
          drupal_set_message(check_plain($key['identifier']) . ' has not been issued a new state.');
        break;
      }
    }
    unset($form_state['storage']);
  }
}

/**
 * Sets up for the theme.
 */

function orphan_object_theme() {
  return array
  (
    'orphan_object_theme' => array
    (
      'arguments' => array('form' => NULL)
    ),
    'orphan_object_form_update' => array
    (
      'arguments' => array('form' => NULL)
    ),
    'orphan_object_form_associate' => array
    (
      'arguments' => array('form' => NULL)
    ),
  );
}

/**
 * Sets the theme.
 */
function theme_orphan_object_theme($form) {
  $rows = array();
  //Creates the table rows
  foreach (element_children($form['manage']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['manage'][$oid]);
    $row[] = drupal_render($form[$oid]['pid']);
    $row[] = drupal_render($form[$oid]['owner']);
    $row[] = drupal_render($form[$oid]['state']);
    $row[] = drupal_render($form[$oid]['logmessage']);
    $rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Manage Object'), t('Object'), t('Object Owner'), t('Object State'), t('Last Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Manage Object'), t('Object'), t('Object Owner'), t('Object State'), t('Last Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were found'),
      'colspan' => 5,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $content = theme('table', $header, $rows);
  $output = "<div id = 'table-scroll' style = 'height: 400px; overflow-y: scroll;'> " . $content . "</div>";
  $output .= drupal_render($form);
  return $output;

  }

/**
 * Sets the theme for the form page 2 by creating a scrollable div with the forms table and results in it.
 */
function theme_orphan_object_form_update($form) {
  $rows = array();

  //Creates the table rows
  foreach (element_children($form['orphans']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['orphans'][$oid]['title']);
    $row[] = drupal_render($form['orphans'][$oid]['status']);
    $row[] = drupal_render($form['orphans'][$oid]['log']);
    $rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Object'), t('Status'), t('Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Object'), t('Status'), t('Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were selected'),
      'colspan' => 3,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $content = theme('table', $header, $rows);
  $output = "<div id = 'table-scroll' style = 'height: 400px; overflow-y: scroll;'> " . $content . "</div>";
  $output .= drupal_render($form);
  return $output;
}

/**
 * Sets the theme for the form page 3 by creating a scrollable div with the forms table and results in it.
 */
function theme_orphan_object_form_associate($form) {
  $rows = array();

  //Creates the table rows
  foreach (element_children($form['orphans']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['orphans'][$oid]['title']);
    $row[] = drupal_render($form['orphans'][$oid]['nid']);
    $row[] = drupal_render($form['orphans'][$oid]['log']);
    $rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Object'), t('Link To Node'), t('Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Object'), t('Link To Node'), t('Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were selected'),
      'colspan' => 3,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $content = theme('table', $header, $rows);
  $output = "<div id = 'table-scroll' style = 'height: 400px; overflow-y: scroll;'> " . $content . "</div>";
  $output .= drupal_render($form);
  return $output;
}

/**
 * Method used to delete orphan fedora objects
 *
 * @param $objects
 * An array of object PIDs selected by the user to be deleted.
 * @param $user
 * The current User. (This is the user deleting the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_delete_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'D'; //Set the object to deleted
        $label = $fedora_item->objectProfile->objLabel; // Object Label
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$value&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        }
        else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " has been deleted by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId, $log_message, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
 * Method used to purge orphan fedora objects
 *
 * @param $objects
 * An array of object PIDs selected by the user to be purged.
 * @param $user
 * The current User. (This is the user pruging the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_purge_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }
  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $log_message = "PID " . $value . " is being set to purged by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }
  return $results;
}

/**
 * Method used to set objects' state to inactive.
 *
 * @param $objects
 * An array of object PIDs selected by the user to be purged.
 * Array Format $object[label] = PID, example $object["Test"] = islandora:13424.
 * @param $user
 * The current User. (This is the user activate the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_inactivate_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }
  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'I'; //Set the object to inactivated
        $label = $fedora_item->objectProfile->objLabel; // Object Label
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$value&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        }
        else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " has been set to inactive by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId , $log_message, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }
  return $results;
}

/**
 * Method used to activate orphan fedora objects
 *
 * @param $objects
 * An array of object PIDs selected by the user to be purged.
 * @param $user
 * The current User. (This is the user activate the objects)
 * @return $results
 * Multi-Dimensal Array containing and array of successful objects and
 * an array of failure objects.
 */
function orphan_object_activate_fedora_objects($objects, $user, $user_set_log = "") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $key => $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
        $state = 'A'; //Set the object to active
        $label = $fedora_item->objectProfile->objLabel; // needs to be filled in with objects label.
        $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
        $url .= "/objects?terms=$value&ownerId=true&resultFormat=xml";
        $resultxml = do_curl($url);
        $resultelements = simplexml_load_string($resultxml);
        if (!empty($resultelements)) {
          $ownerId = (string) $resultelements->resultList->objectFields->ownerId;
        }
        else {
          $ownerId = NULL;
        }
        $log_message = "Object " . $value . " is being set to active by user : " . $user->name . " (" . $user->uid . "). " . $user_set_log;
        $fedora_item->modify_object($label, $state, $ownerId, $log_message, TRUE);
        $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
 * Function: orphan_objects_getList
 *
 * Description: Returns an array containing all the orphan objects in the fedora repository
 *
 * @return array
 */

function orphan_object_getList() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  $collectionused = variable_get('orphanobject_collection_default', 'islandora:sp_generic_collection,Islandora GENERIC Collection');
  $colparts = explode(',', $collectionused);
  $pid = $colparts[0];


  $collectionquery = 'select $object $title from <#ri>
                            where ($object <dc:title> $title
                              and $object <fedora-rels-ext:isMemberOfCollection><info:fedora/' . $pid . '>)';
  $collectionurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $collectionurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $collectioncontent = do_curl($collectionurl . htmlentities(urlencode($collectionquery)));
  $collectionlist = explode("\n", $collectioncontent);

  array_shift($collectionlist);

  $collectionlist = preg_replace('/info:fedora\//', '', $collectionlist);
  $collectionarray = array();
  foreach ($collectionlist as $collectionitem) {   //removes  blanks
    if ($collectionitem) {
      $collectionparts = explode(',', $collectionitem);
      array_push($collectionarray, $collectionparts[0]);
    }
  }

  $results = array();

  $query = db_query("SELECT pid FROM {node_fedora_objects}");

  while ($resultrow = db_fetch_object($query)) {
    $results[] = $resultrow->pid;
  }

  $returnlist = array_diff($collectionarray, $results);

  return $returnlist;
}
/**
 * Generates and Attaches XACML Policy to specificied PID using Owner and Node Owner.
 * For public policy only the owner, node owner and admins are granted management access and there is no restrictions on viewing
 *  @param pid
 *  Object PID
 *  @param uid
 *  Current User's Id - get name and set to management
 *  @param node_ownerid
 *  Node Owner's id - get name and set to management
 *
 */
function orphan_object_create_xacml_policy_public($pid, $uid, $node_ownerid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'Xacml');
  module_load_include('inc', 'islandora_xacml_api', 'XacmlException');

  $sql = "SELECT name FROM {users} WHERE uid = '" . $uid . "'";
  $user_result = db_query($sql);
  $user_name = db_result($user_result);

  //Only need node owner if it is a different user
  if ($uid != $node_ownerid) {
    $sql2 = "SELECT name FROM {users} WHERE uid = '" . $node_ownerid . "'";
    $owner_result = db_query($sql2);
    $owner_name = db_result($owner_result);
  }
  else {
    $owner_name = "";
  }
  //Generate XACML
  $xacml = new Xacml();
  $xacml->managementRule->addUser($user_name);
  $xacml->managementRule->addRole('administrators');
  if (!empty($owner_name)) {
    $xacml->managementRule->addUser($owner_name);
  }
  $obj_owner = FALSE;
  $fedora_item = new Fedora_Item($pid);
  if ($exist = $fedora_item->exists()) {
    $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
    $url .= "/objects?terms=$pid&ownerId=true&resultFormat=xml";
    $resultxml = do_curl($url);
    $resultelements = simplexml_load_string($resultxml);
    if (!empty($resultelements)) {
      $obj_owner = (string) $resultelements->resultList->objectFields->ownerId;
    }
  }
  // Prevents admin from locking owner of object out
  if ($obj_owner != 'admin' && $obj_owner != $owner_name && $obj_owner != $user_name && $obj_owner) {
  $xacml->managementRule->addUser($obj_owner);
  }

  $xml = $xacml->getXmlString(); //create the xacml xml

  //Attach XACML
  if ($exist) {
    $datastream_array = $fedora_item->get_datastreams_list_as_array();
    if (array_key_exists('POLICY', $datastream_array)) {
      $fedora_item->modify_datastream_by_value($xml, 'POLICY', 'Xacml Policy Stream', 'text/xml');
    }
    else {
      $fedora_item->add_datastream_from_string($xml, 'POLICY', 'Xacml Policy Stream', 'text/xml', 'X');
    }
  }
}